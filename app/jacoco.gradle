apply plugin: 'jacoco'
//
////Enable the coverage report for unit test
android {
    compileSdkVersion 29
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses true
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}

jacoco {
    toolVersion = "0.8.5"
}

def fileFilter1 = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
        '**/*Module.*', // Modules for Dagger.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*', //Dagger auto-generated code
        '**/*$*$*.*', // Anonymous classes generated byAge of Empires kotlin
        //add libraries
        'android/**/*.*',
        'com/**/*.*','**/*$*$*.*',
        'uk/**/*.*',
        'io/**/*.*',
        //remove what we don't test
        'androidTest/**/*.*',
        'test/**/*.*',
        '**/injector/**/*.*',
        '**/model/**/*.*',
        '**/mock/**/*.*',
        '**/event/**/*.*',
        '**/**_ViewBinding**',
        '**/*EventType.*',
        '**/**Mocked'
]
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
def javaClasses = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
def javaSrc = "$project.projectDir/src/main/java"
def kotlinSrc = "$project.projectDir/src/main/kotlin"

task junitReport(type: JacocoReport, dependsOn: ['clean', 'testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file("${buildDir}/jacocoHtml")
    }
    def packageName = "com/rahullohra/myweatherapp"
    println file("${buildDir}/jacocoHtml")
    def presentationClasses = ["${packageName}/presentation/ui/views/**"]
    def extraClasses = ["${packageName}/presentation/**",
                        "${packageName}/leaks/**",
                        "${packageName}/extras/**",
                        "${packageName}/data/**",
                        "${packageName}/annotations/**",
                        "${packageName}/WeatherApp.class",
                        "**/idlingResources/**",
                        '**/*$*.*'
    ]

    kotlinClasses.exclude(extraClasses)

    sourceDirectories = files([javaSrc, kotlinSrc])
    classDirectories = files([javaClasses, kotlinClasses])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task espressoReport(type: JacocoReport, dependsOn: ['clean', 'connectedDebugAndroidTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file("${buildDir}/jacocoHtml")
    }

    println file("${buildDir}/jacocoHtml")

    sourceDirectories = files([javaSrc, kotlinSrc])
    classDirectories = files([javaClasses, kotlinClasses])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task showReport(type: Exec, dependsOn: ['junitReport']) {
    println "I am awesome"
    commandLine 'sh', './open-report.sh'
}